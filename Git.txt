本教程面向初学者，虽然不会让你成为Git专家，但是绝对充分且必要且可以通过Git轻松地完成你的工作，其次本教程实用性超强，边学边练，一点也不觉得枯燥

============

Git是目前世界上最先进的分布式版本控制系统因为它开源而且免费最快、最简单也最流行

SVN是目前用得最多的集中式版本库控制系统开源而且免费的

Git有什么特点？简单来说就是：高端大气上档次

那什么是版本控制系统？
对版本进行管理的系统，能记录每次文件的改动

SVN是集中式的版本控制系统，需要联网（公司）才能使用，但是速度太慢

Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git

===========================

集中式和分布式版本控制系统有什么区别呢

集中式版本控制系统它会将所有的代码所有的文档，放在一个中央服务器上，干活的时候需要我们用自己的电脑去更新中央服务器得到最新版本，干完活之后再把自己的工作产出推送给中央服务器上，它的缺点就是们的中央服务器上的版本控制系统通常都在服务器上所以我们必须要用到互联网用svn去更新去提交的速度非常慢而且如果中央服务器要是出现问题的话那么所有的人都是没有办法干活了

分布式版本控制系统就是相当于在每个人的电脑上都有一个完整的版本库，他不会像集中式版本控制系统那样如果出现了问题就全部无法干活儿，这显示出了分布式版本控制系统它是相对集中式管理系统安全性是要高的况且他也不需要连也有svn难以媲美的分支管理功能可以这么说分布式版本控制系统就是相当于每个人的电脑都是一个完整的版本库那么分布式版本控制系统是如何实现多人协作呢在分布式版本控制系统中也有一个充当中央服务器的一个角色这个中央服务器的角色仅仅是用来方便交换大家的修改像是gitee和GitHub

===========================

git的下载地址：https://git-scm.com/downloads

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

===========================

创建版本库

版本库又名仓库，英文名 repository，可以简单理解它就是一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原“

创建一个版本库非常简单

第一步，选择一个合适的地方，创建一个空目录 该目录及其父级目录不能含有中文

第二步，通过git init命令把这个目录变成 Gi t可以管理的仓库：git init

仓库建好了之后该目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本库的，千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了

也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的，但最好使用一个空的目录创建Git仓库

把文件添加到版本库

首先再明确一下，所有的版本控制系统(包括git)，其实只能跟踪文本文件(.py,.html,.js)的改动，版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”，而像图片、视频这些二进制文件【Microsoft的Word格式是二进制格式】虽然也能由版本控制系统管理，但没法跟踪文件的变化【改动】，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道，如果要真正使用版本控制系统，就要以纯文本方式编写文件，强烈建议使用标准的UTF-8编码所有语言使用同一种编码，既没有冲突，又被所有平台所支持

使用Windows的童鞋要特别注意：

使用git的时候要注意不要使用系统自带的记事本，因为该记事本会在保存文件的时候在开头添加16进制的字符0xefbbbf，可以使用vscode代替记事本

言归正传，现在我们编写一个readme.txt文件，内容如下：

Git is a version control system.
Git is free software.

一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件

把一个文件放到Git仓库只需要两步。

第一步，用命令git add告诉Git，把文件添加到仓库：

$ git add readme.txt

执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

第二步，用命令git commit告诉Git，把文件提交到仓库：

git commit -m "wrote a readme file"

简单解释一下git commit命令，-m 后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

git commit 命令执行成功后会告诉你，1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）

为什么Git添加文件需要add，commit一共两步呢？

因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：

$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

疑难解答

Q：输入git add readme.txt，得到错误：fatal: not a git repository (or any of the parent directories)

A：Git命令必须在Git仓库目录内执行（git init除外），在仓库目录外执行是没有意义的

Q：输入git add readme.txt，得到错误fatal: pathspec 'readme.txt' did not match any files

A：添加某个文件时，该文件必须在当前目录下存在，用ls或者dir命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名

小结

初始化一个 Git 仓库，使用 git init 命令

添加文件到Git仓库，分两步：

使用命令git add <file>，注意，可反复多次使用，添加多个文件，不用逗号做间隔；

使用命令git commit -m '<message>'，完成

=====================时光机穿梭========================

继续修改readme.txt文件，改成如下内容：

Git is a distributed version control system.
Git is free software.

现在，运行git status命令看看结果：

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")

git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。

虽然Git告诉我们readme.txt被修改了，所以，需要用git diff这个命令看看：

$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.

git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个distributed单词

提交修改和提交新文件是一样的两步，

第一步是git add：

$ git add readme.txt

同样没有任何输出。

在执行第二步git commit之前，我们再运行git status看看当前仓库的状态：

$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   readme.txt

git status告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：

$ git commit -m "add distributed"
[master e475afc] add distributed
 1 file changed, 1 insertion(+), 1 deletion(-)

提交后，我们再用git status命令看看仓库的当前状态：

$ git status
On branch master
nothing to commit, working tree clean
Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。

小结

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容

=======================版本回退======================

Q：在版本控制系统命令什么命令可以告诉我们历史记录

A：使用 git log 命令查看，顺序规则是从最近到最远的提交日志

Q：git log 返回的输出信息太多了，怎么可以简化一下

A：可以在git log 后面加上--pretty=oneline参数

Q：为什么git的commit id （版本号）需要用这么一大串数字表示呢

A：因为Git是分布式的版本控制系统，多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，版本号就会冲突

Q：怎么做把某个文件退到上一个版本

A1：在Git中当前版本用HEAD表示，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然也可以简写，比如往上100可以写成HEAD~100

A2：$ git reset --hard HEAD^   // Q：--hard参数有啥意义 A：先放心使用，这个后面再讲

原理：因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指回了add distributed：

┌────┐
│HEAD│
└────┘
   │
   │    ○ append GPL
   │    │
   └──▶ ○ add distributed
        │
        ○ wrote a readme file

Q：现在当想再回到刚刚那个最新的版本怎么办并且用git log找不到刚刚的版本了怎么办【相当于ctrl + z ，ctl + y】

A1：只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是1094adb...，

A2：$ git reset --hard 1094a  //版本号没必要写全但也不要过少

原理：因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指回了append GPL
┌────┐
│HEAD│
└────┘
   │
   └──▶ ○ append GPL
        │
        ○ add distributed
        │
        ○ wrote a readme file

Q：为什么Git的版本回退速度非常快

A：因为回退对Git来说只是把HEAD指针从一个commit id 版本号 指向了另一个commit id 版本号

Q：想恢复到新版本，找不到新版本的commit id怎么办

A1：当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id，

A2：Git提供了一个命令git reflog用来记录你的每一次命令：$ git reflog  然后 $ git reset --hard 1094a

小结

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本

====================工作区和暂存区=========================

工作区---->git add---->暂存区---->git commit -m "string" ---->master分支

Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念

名词解释

工作区（Working Directory）：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区

版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库

版本库里存了很多东西
	其中最重要的就是称为stage（或者叫index）的暂存区，
	还有Git为我们自动创建的第一个分支master，
	以及指向master的一个指针叫HEAD，分支和HEAD的概念我们以后再讲

把文件往Git版本库里添加的时候是分两步执行的：

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支；因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以git commit就是往master分支上提交更改；你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改

新添加的文件使用git status一般显示Untracked files:下方一般有新文件的名字，因为LICENSE还从来没有被添加过，所以它的状态是Untracked；modified:   readme.txt代表readme.txt被修改了

git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支

一旦commit(提交)后，如果你又没有对工作区做任何修改，那么工作区就是“干净”clean 的

=======================管理修改======================

Q：为什么Git比其他版本控制系统设计得优秀

A：因为Git跟踪并管理的是修改，而非文件

Q：什么是修改

A：比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改

用 git diff HEAD -- readme.txt 命令可以查看工作区和版本库里面最新版本的区别

不把修改添加到暂存，修改就不会commit

Q：那怎么提交第二次修改呢

A：你可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了

======================撤销修改=======================

修改文件在工作区使用：$ git checkout -- readme.txt

修改文件在暂存区使用：$ git reset HEAD readme.txt 然后 $ git checkout -- readme.txt

修改文件已到版本库使用：回退到上一个版本，条件就是你还没有把自己的本地版本库推送到远程如git和github

Q：记不住命令怎么办
A：在工作区或暂存区git status有提示

小结

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

======================删除文件=======================

在Git中，删除也是一个修改操作，

一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了，这个时候如果使用git status命令会立刻告诉你哪些文件被删除了，为了保持版本库和工作区de一致性需要执行git rm <file>或者git add<file>之后记得commit一下即可删除

如果删错了想在恢复回来(注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！)

$ git checkout -- test.txt

git checkout -- test.txt 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

小结

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

=====================远程仓库========================

如果只是在一个仓库里管理文件历史，Git和SVN真没啥区别

Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上

Q: 怎么分布呢？

A: 最早，肯定只有一台机器有一个原始版本库[如：GitHub，马云]，此后，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交

Q:  免费获得Git远程仓库

A:  注册一个GitHub账号

由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：

第1步：创建SSH Key。

如果在你的加入中发现有点SSH目录且里面有id_rsa和id_rsa.pub这2个文件可以直接跳到第二步

如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"  把邮件地址换成你自己的邮件地址  由于这个Key也不是用于军事目的，所以也无需设置密码 然后一路回车

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人

第2步：登陆GitHub，打开“settings”，点击SSH and GPG Keys”页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

Q: 为什么GitHub需要SSH Key呢？

A: 因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送

W: GitHub允许你添加多个Key

A: 假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了

tips: 在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改），所以，不要把敏感信息放进去。

Q: 怎么不让别人看到Git库

A1: 一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了【不可读更不可写】

A2: 另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备

=======================添加远程库======================

现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得

Q: 如何在GitHub创建一个新的仓库

A: 登陆GitHub，然后，在右上角找到“Create a new repo”按钮，在Repository name填入仓库的名称其他保持默认设置，点击“Create repository”按钮功地创建了一个新的Git仓库

Q: 如何把一个已有的本地仓库与之关联

A1: 把本地仓库的内容推送到GitHub仓库

A2: $ git remote add origin git@github.com:michaelliao/learngit.git  //把michaelliao替换成你自己的GitHub账户名

W: 为什么本地仓库关联成其他的人的远程库，会推送是推不上去的

A: 因为你的SSH Key公钥不在我的账户列表中

Q: 添加后，远程库的名字叫什么

A: origin 这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库

Q: 如何把本地库的所有内容推送到远程库上

A: $ git push -u origin master

tips1: 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程

tips2: 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

tips3: 从现在起，只要本地作了提交，就可以通过命令：$ git push origin master 把本地master分支的最新修改推送至GitHub


SSH警告

Q: 当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：

The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?

A1: 这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

A2: Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

A3: Warning: Permanently added 'github.com' (RSA) to the list of known hosts.

tips1: 这个警告只会出现一次，后面的操作就不会有任何警告了。

tips2: 如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。

Q: 如果想解除了本地和远程的绑定关系

A1: 先用git remote -v查看远程库信息

A2: 然后，根据名字删除，比如删除origin：$ git remote rm origin

Q: 如果想删除远程库

A: 需要登录到GitHub，在后台页面找到删除按钮再删除

小结

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

=======================从远程库克隆======================

Q: 现在，假设我们从零开发，那么最好的方式是

A: 先创建远程库，然后，从远程库克隆

勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件

Q: 使用什么命令克隆一个本地库

A: git clone git@github.com:michaelliao/gitskills.git   // 注意把Git库的地址换成你自己的

Q: 如果有多个人协作开发咋整

A: 那么每个人各自从远程克隆一份就可以了

Q: Git支持多种协议如https，但默认使用的是

A: ssh 因为ssh协议速度最快

Q: git用https协议克隆的缺点

A: 速度慢，每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

小结

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆

=============================================

