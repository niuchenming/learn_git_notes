push() 函数接受一个或多个参数（parameters），并把它压入到数组的末尾

.pop() 函数用来弹出一个数组末尾的值，弹出的值可以赋给另一个变量，换句话说就是 .pop() 函数移除数组末尾的元素并返回这个元素

.shift() 函数用来移除数组的第一个元素

.unshift() 函数在数组的头部添加元素


===================

在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个函数中

函数的定义：
function functionName() {
  console.log("Hello World");
}

函数的调用：
函数名+小括号：functionName(); 

解释：
每次调用函数时，它都会在控制台上打印消息 Hello World

===================

带有参数的函数

function testFun(param1, param2) {
  console.log(param1, param2);
}

调用函数传入参数：testFun("Hello","World")

param1, param2为形参，"Hello","World" 为实参

===================

带有return值的函数

function plusThree(num) {
  return num + 3;
}

const answer = plusThree(5);

answer 的值为 8

===================

全局作用域：
在 JavaScript 中变量的作用域涉及到变量的作用范围，在函数意外定义的变量具有全局作用域，这意味着具有全局作用域的变量可以在代码的任何地方被调用

你应该总是用 let 或 const 声明你的变量

===================

局部作用域：
在函数的内部定义一个变量，以及该函数的参数都具有局部（local）作用域， 这意味着它们只在该函数内可见

===================

函数内部的同名变量的优先级比函数外部的全局变量高

===================

当函数没有返回值return的时候，值为undefined

===================

将函数的返回值赋给一个变量

ourSum = sum(5, 12);

===================

布尔值只能是两个值中的一个：true 另一个是 false

===================

条件判断if

小括号中的条件为真则执行定义在大括号里面的代码当条件的计算结果为 false，大括号内的代码将不会执行。

if（条件为真）{
语句被执行
}

===================

判断2个值是否相等的运算符是 == 它会自动把字符型数字变成数值型数字做比较

相等运算符比较两个值，如果它们是相等，返回 true，如果它们不相等，返回 false


在 JavaScript 中，为了让两个不同的数据类型（例如 numbers 和 strings）的值可以作比较，它必须把一种类型转换为另一种类型。 这叫作 “类型强制转换”

===================

=== 这是严格相等运算符与相等操作符（==）转换数据两类型不同，严格相等运算符不会做类型转换，如果比较的值类型不同，那么在严格相等运算符比较下它们是不相等的，会返回 false

===================

如果要比较的值不是同一类型，相等运算符会先执行数据类型转换，然后比较值。 而严格相等运算符只比较值，不会进行数据类型转换
3 == '3' 返回 true ，因为 JavaScript 执行了从字符串到数字类型的转换。 3 === '3' 返回 false，因为类型不同，没有进行类型转换

提示 在 JavaScript 中，你可以使用 typeof 运算符确定变量或值的类型

typeof 3
typeof '3'
typeof 3 返回字符串 number，typeof '3' 返回字符串 string

===================

取反：假的时候为真
不相等运算符（!=）与相等运算符是相反的，不相等运算符在比较的时候也会转换值的数据类型

===================
严格不相等运算符（!==）与全等运算符是相反的，这意味着严格不相等并返回 false 的地方，用严格相等运算符会返回 true，严格不相等运算符不会转换值的数据类型

===================
与相等运算符一样，大于运算符在比较的时候，会转换值的数据类型
===================
与相等运算符相似，大于等于运算符在比较的时候会转换值的数据类型
===================
与相等运算符类似，小于运算符在做比较的时候会转换值的数据类型
===================
与相等运算符类似，小于或等于运算符会转换数据类型
===================
逻辑与：当且仅当运算符的左边和右边都是 true，逻辑与运算符（&&）才会返回 true

if (num > 5 && num < 10) {
  return "Yes";
}
return "No";
===================
逻辑或（||）：只要逻辑或运算符两边的任何一个运算的结果是 true，则返回 true。 否则，返回 false 
===================
使用 else 语句，可以执行当条件为假时相应的代码
if (num > 10) {
  return "Bigger than 10";
} else {
  return "10 or Less";
}
===================
如果你有多个条件语句，你可以通过 else if 语句把 if 语句链起来
if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}
===================
if、else if 语句中的代码顺序是很重要的
===================
if/else 语句串联在一起可以实现复杂的逻辑
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
===================
